[{"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\index.js":"1","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\App.js":"2","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\pages\\New.js":"3","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\pages\\Home.js":"4","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\pages\\Diary.js":"5","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\pages\\Edit.js":"6","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\MyHeader.js":"7","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\DiaryEditor.js":"8","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\DiaryList.js":"9","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\MyButton.js":"10","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\util\\date.js":"11","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\MyFooter.js":"12","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\util\\emotion.js":"13","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\EmotionItem.js":"14","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\DiaryItem.js":"15"},{"size":230,"mtime":1665143457984,"results":"16","hashOfConfig":"17"},{"size":2818,"mtime":1667717579359,"results":"18","hashOfConfig":"17"},{"size":370,"mtime":1665143457988,"results":"19","hashOfConfig":"17"},{"size":2354,"mtime":1667725999134,"results":"20","hashOfConfig":"17"},{"size":3118,"mtime":1666507048879,"results":"21","hashOfConfig":"17"},{"size":1105,"mtime":1665143457986,"results":"22","hashOfConfig":"17"},{"size":305,"mtime":1665143457982,"results":"23","hashOfConfig":"17"},{"size":3490,"mtime":1666517887211,"results":"24","hashOfConfig":"17"},{"size":3141,"mtime":1666511920629,"results":"25","hashOfConfig":"17"},{"size":383,"mtime":1666507048877,"results":"26","hashOfConfig":"17"},{"size":89,"mtime":1665143457991,"results":"27","hashOfConfig":"17"},{"size":242,"mtime":1666507048877,"results":"28","hashOfConfig":"17"},{"size":771,"mtime":1665143457992,"results":"29","hashOfConfig":"17"},{"size":489,"mtime":1665143457980,"results":"30","hashOfConfig":"17"},{"size":1621,"mtime":1667096869441,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"pzi0lr",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\index.js",[],["68","69"],"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\App.js",[],"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\pages\\New.js",[],"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\pages\\Home.js",[],"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\pages\\Diary.js",["70","71","72","73"],"import { useState, useContext, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { DiaryStateContext } from \"../App\";\r\nimport { getStringDate } from \"../util/date\";\r\nimport { emotionList } from \"../util/emotion\";\r\n\r\nimport MyHeader from \"../components/MyHeader\";\r\nimport MyFooter from \"../components/MyFooter\";\r\nimport MyButton from \"../components/MyButton\";\r\n\r\nconst Diary = () => {\r\n  const { id } = useParams();\r\n  const diaryList = useContext(DiaryStateContext);\r\n  const navigate = useNavigate();\r\n  const [data, setData] = useState();\r\n\r\n  useEffect(() => {\r\n    const titleElement = document.getElementsByTagName(\"title\")[0];\r\n    titleElement.innerHTML = `감정 일기장 - ${id}번 일기`;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (diaryList.length >= 1) {\r\n      const targetDiary = diaryList.find(\r\n        (it) => parseInt(it.id) === parseInt(id)\r\n      );\r\n\r\n      if (targetDiary) {\r\n        // 일기가 존재할 때\r\n        setData(targetDiary);\r\n      } else {\r\n        // 일기가 없을 때\r\n        alert(\"없는 일기입니다.\");\r\n        navigate(\"/\", { replace: true });\r\n      }\r\n    }\r\n  }, [id, diaryList]);\r\n\r\n  if (!data) {\r\n    return <div className=\"DiaryPage\">로딩중입니다...</div>;\r\n  } else {\r\n    const curEmotionData = emotionList.find(\r\n      (it) => parseInt(it.emotion_id) === parseInt(data.emotion)\r\n    );\r\n    console.log(curEmotionData);\r\n\r\n    return (\r\n      <div className=\"DiaryPage\">\r\n        <MyHeader\r\n          // headText={`${getStringDate(new Date(data.date))} 기록`}\r\n          headText={`${getStringDate(new Date(data.date)).split(\"-\")[0]}년 ${getStringDate(new Date(data.date)).split(\"-\")[1]}월 ${getStringDate(new Date(data.date)).split(\"-\")[2]}일의  기록`}\r\n          leftChild={\r\n            <button onClick={() => navigate(-1)}><img className=\"img_button\" src=\"../../assets/back.png\" /></button>\r\n          }\r\n        />\r\n        <article>\r\n          <section>\r\n            <h4>이 날의 기분</h4>\r\n            <div\r\n              className={[\r\n                \"diary_img_wrapper\",\r\n                `diary_img_wrapper_${data.emotion}`,\r\n              ].join(\" \")}\r\n            >\r\n              <img src={curEmotionData.emotion_img} style={{width: 100, height: 100}} />\r\n              <div className=\"emotion_descript\">\r\n                {curEmotionData.emotion_descript}\r\n              </div>\r\n            </div>\r\n          </section>\r\n          <section>\r\n            <h4>이 날의 생각</h4>\r\n            <div className=\"diary_content_wrapper\">\r\n              <p>{data.content}</p>\r\n            </div>\r\n          </section>\r\n        </article>\r\n        <MyFooter\r\n        leftChild={\r\n          <MyButton \r\n            text={\"삭제하기\"} \r\n            type={\"negative\"}\r\n            onClick={() => navigate(-1)} />\r\n        }\r\n        rightChild={\r\n          <MyButton\r\n            text={\"수정하기\"}\r\n            type={\"neutral\"}\r\n            onClick={() => navigate(`/edit/${data.id}`)}\r\n          />\r\n        }\r\n      />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Diary;\r\n","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\pages\\Edit.js",["74","75"],"import { useState, useContext, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { DiaryStateContext } from \"../App\";\r\nimport DiaryEditor from \"../components/DiaryEditor\";\r\n\r\nconst Edit = () => {\r\n  const [originData, setOriginData] = useState();\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n\r\n  const diaryList = useContext(DiaryStateContext);\r\n\r\n  useEffect(() => {\r\n    const titleElement = document.getElementsByTagName(\"title\")[0];\r\n    titleElement.innerHTML = `감정 일기장 - ${id}번 일기 수정`;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (diaryList.length >= 1) {\r\n      const targetDiary = diaryList.find(\r\n        (it) => parseInt(it.id) === parseInt(id)\r\n      );\r\n\r\n      if (targetDiary) {\r\n        setOriginData(targetDiary);\r\n      } else {\r\n        alert(\"없는 일기입니다.\");\r\n        navigate(\"/\", { replace: true });\r\n      }\r\n    }\r\n  }, [id, diaryList]);\r\n\r\n  return (\r\n    <div>\r\n      {originData && <DiaryEditor isEdit={true} originData={originData} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Edit;\r\n","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\MyHeader.js",[],"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\DiaryEditor.js",["76","77"],"import { useState, useRef, useContext, useEffect, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { DiaryDispatchContext } from \"./../App.js\";\r\n\r\nimport MyHeader from \"./MyHeader\";import MyFooter from \"./MyFooter\";\r\nimport MyButton from \"./MyButton\";\r\nimport EmotionItem from \"./EmotionItem\";\r\n\r\nimport { getStringDate } from \"../util/date.js\";\r\nimport { emotionList } from \"../util/emotion.js\";\r\n\r\nconst env = process.env;\r\nenv.PUBLIC_URL = env.PUBLIC_URL || \"\";\r\n\r\nconst DiaryEditor = ({ isEdit, originData }) => {\r\n  const contentRef = useRef();\r\n  const [content, setContent] = useState(\"\");\r\n  const [emotion, setEmotion] = useState(3);\r\n  const [date, setDate] = useState(getStringDate(new Date()));\r\n\r\n  const { onCreate, onEdit, onRemove } = useContext(DiaryDispatchContext);\r\n  const handleClickEmote = useCallback((emotion) => {\r\n    setEmotion(emotion);\r\n  }, []);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = () => {\r\n    if (content.length < 1) {\r\n      contentRef.current.focus();\r\n      return;\r\n    }\r\n\r\n    if (\r\n      window.confirm(\r\n        isEdit ? \"일기를 수정하시겠습니까?\" : \"새로운 일기를 작성하시겠습니까?\"\r\n      )\r\n    ) {\r\n      if (!isEdit) {\r\n        onCreate(date, content, emotion);\r\n      } else {\r\n        onEdit(originData.id, date, content, emotion);\r\n      }\r\n    }\r\n\r\n    navigate(\"/\", { replace: true });\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (window.confirm(\"정말 삭제하시겠습니까?\")) {\r\n      onRemove(originData.id);\r\n      navigate(\"/\", { replace: true });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEdit) {\r\n      setDate(getStringDate(new Date(parseInt(originData.date))));\r\n      setEmotion(originData.emotion);\r\n      setContent(originData.content);\r\n    }\r\n  }, [isEdit, originData]);\r\n\r\n  return (\r\n    <div className=\"DiaryEditor\">\r\n      <MyHeader\r\n        headText={isEdit ? \"일기 수정하기\" : \"일기 작성하기\"}\r\n        leftChild={\r\n          <MyButton text={\"< 뒤로가기\"} onClick={() => navigate(-1)} />\r\n        }\r\n        rightChild={isEdit ?\r\n          <MyButton\r\n          text={\"수정완료\"}\r\n          type={\"neutral\"}\r\n          onClick={handleSubmit}\r\n          /> :\r\n          <MyButton\r\n          text={\"작성완료\"}\r\n          type={\"positive\"}\r\n          onClick={handleSubmit}\r\n        />\r\n        }\r\n      />\r\n      <div>\r\n        <section>\r\n          <h4>오늘은 {date.split(\"-\")[0]}년 {date.split(\"-\")[1]}월 {date.split(\"-\")[2]}일 입니다.</h4>\r\n        </section>\r\n        <section>\r\n          <h4>오늘 기분은 어떠신가요?</h4>\r\n          <div className=\"input_box emotion_list_wrapper\">\r\n            {emotionList.map((it) => (\r\n              <EmotionItem\r\n                key={it.emotion_id}\r\n                {...it}\r\n                onClick={handleClickEmote}\r\n                isSelected={it.emotion_id === emotion}\r\n              />\r\n            ))}\r\n          </div>\r\n        </section>\r\n        <section>\r\n          <h4>오늘 하루는 어떠셨나요?</h4>\r\n          <div className=\"input_box text_wrapper\">\r\n            <textarea\r\n              placeholder=\"당신의 하루가 궁금합니다.\"\r\n              ref={contentRef}\r\n              value={content}\r\n              maxLength={1500}\r\n              onChange={(e) => setContent(e.target.value)}\r\n            />\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiaryEditor;\r\n","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\DiaryList.js",[],"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\MyButton.js",[],"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\util\\date.js",[],"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\MyFooter.js",[],"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\util\\emotion.js",[],"C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\EmotionItem.js",["78"],"import React from \"react\";\r\n\r\nconst EmotionItem = ({\r\n  emotion_id,\r\n  emotion_img,\r\n  emotion_descript,\r\n  onClick,\r\n  isSelected,\r\n}) => {\r\n  return (\r\n    <div\r\n      onClick={() => onClick(emotion_id)}\r\n      className={[\r\n        \"EmotionItem\",\r\n        isSelected ? `EmotionItem_on_${emotion_id}` : `EmotionItem_off`,\r\n      ].join(\" \")}\r\n    >\r\n      <img src={emotion_img} />\r\n      <span>{emotion_descript}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(EmotionItem);\r\n","C:\\Users\\so960\\Desktop\\workspace\\DearMe\\client\\src\\components\\DiaryItem.js",["79","80","81","82","83"],"import { React, useState, useRef, useContext, useEffect, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MyButton from \"./MyButton\";\r\nimport { DiaryDispatchContext } from \"./../App.js\";\r\n\r\nconst DiaryItem = ({ id, emotion, content, date }) => {\r\n  const navigate = useNavigate();\r\n  const { onRemove } = useContext(DiaryDispatchContext);\r\n  const env = process.env;\r\n  env.PUBLIC_URL = env.PUBLIC_URL || \"\";\r\n\r\n  const strDate = new Date(parseInt(date)).toLocaleDateString();\r\n\r\n  const goDetail = () => {\r\n    navigate(`/diary/${id}`);\r\n  };\r\n\r\n  const goEdit = () => {\r\n    // if(strDate!=date){\r\n    // }\r\n      navigate(`/edit/${id}`);\r\n  };\r\n\r\n  const delDiary = () => {\r\n    if (window.confirm(\"정말 삭제하시겠습니까?\")) {\r\n      onRemove(id);\r\n      navigate(\"/\", { replace: true });\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"DiaryItem\">\r\n      <div\r\n        onClick={goDetail}\r\n        className={[\r\n          \"emotion_img_wrapper\",\r\n          `emotion_img_wrapper_${emotion}`,\r\n        ].join(\" \")}\r\n      >\r\n        <img src={process.env.PUBLIC_URL + `assets/emotion${emotion}.png`} />\r\n      </div>\r\n      <div onClick={goDetail} className=\"info_wrapper\">\r\n        <div className=\"diary_date\">{strDate}</div>\r\n        <div className=\"diary_content_preview\">{content.slice(0, 25)}</div>\r\n      </div>\r\n      <div className=\"btn_wrapper\">\r\n        <MyButton onClick={goEdit} text={\"수정하기\"} type={\"neutral\"} />\r\n        <MyButton onClick={delDiary} text={\"삭제하기\"} type={\"negative\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiaryItem;",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":20,"column":6,"nodeType":"90","endLine":20,"endColumn":8,"suggestions":"91"},{"ruleId":"88","severity":1,"message":"92","line":37,"column":6,"nodeType":"90","endLine":37,"endColumn":21,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":53,"column":50,"nodeType":"96","endLine":53,"endColumn":108},{"ruleId":"94","severity":1,"message":"95","line":65,"column":15,"nodeType":"96","endLine":65,"endColumn":89},{"ruleId":"88","severity":1,"message":"89","line":16,"column":6,"nodeType":"90","endLine":16,"endColumn":8,"suggestions":"97"},{"ruleId":"88","severity":1,"message":"92","line":31,"column":6,"nodeType":"90","endLine":31,"endColumn":21,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":5,"column":42,"nodeType":"101","messageId":"102","endLine":5,"endColumn":50},{"ruleId":"99","severity":1,"message":"103","line":48,"column":9,"nodeType":"101","messageId":"102","endLine":48,"endColumn":21},{"ruleId":"94","severity":1,"message":"95","line":18,"column":7,"nodeType":"96","endLine":18,"endColumn":32},{"ruleId":"99","severity":1,"message":"104","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":25},{"ruleId":"99","severity":1,"message":"105","line":1,"column":27,"nodeType":"101","messageId":"102","endLine":1,"endColumn":33},{"ruleId":"99","severity":1,"message":"106","line":1,"column":47,"nodeType":"101","messageId":"102","endLine":1,"endColumn":56},{"ruleId":"99","severity":1,"message":"107","line":1,"column":58,"nodeType":"101","messageId":"102","endLine":1,"endColumn":69},{"ruleId":"94","severity":1,"message":"95","line":39,"column":9,"nodeType":"96","endLine":39,"endColumn":78},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["110"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["111"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["112"],["113"],"no-unused-vars","'MyFooter' is defined but never used.","Identifier","unusedVar","'handleRemove' is assigned a value but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'useCallback' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"114","fix":"118"},{"desc":"116","fix":"119"},"Update the dependencies array to be: [id]",{"range":"120","text":"121"},"Update the dependencies array to be: [id, diaryList, navigate]",{"range":"122","text":"123"},{"range":"124","text":"121"},{"range":"125","text":"123"},[735,737],"[id]",[1112,1127],"[id, diaryList, navigate]",[564,566],[904,919]]