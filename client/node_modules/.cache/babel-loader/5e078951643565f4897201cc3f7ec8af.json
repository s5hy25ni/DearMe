{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\so960\\\\Desktop\\\\workspace\\\\learn-react-emotion-diary\\\\src\\\\components\\\\DiaryEditor.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DiaryDispatchContext } from \"./../App.js\";\nimport MyHeader from \"./MyHeader\";\nimport MyButton from \"./MyButton\";\nimport EmotionItem from \"./EmotionItem\";\nimport { getStringDate } from \"../util/date.js\";\nimport { emotionList } from \"../util/emotion.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst env = process.env;\nenv.PUBLIC_URL = env.PUBLIC_URL || \"\";\n\nconst DiaryEditor = _ref => {\n  _s();\n\n  let {\n    isEdit,\n    originData\n  } = _ref;\n  const contentRef = useRef();\n  const [content, setContent] = useState(\"\");\n  const [emotion, setEmotion] = useState(3);\n  const [date, setDate] = useState(getStringDate(new Date()));\n  const {\n    onCreate,\n    onEdit,\n    onRemove\n  } = useContext(DiaryDispatchContext);\n  const handleClickEmote = useCallback(emotion => {\n    setEmotion(emotion);\n  }, []);\n  const navigate = useNavigate();\n\n  const handleSubmit = () => {\n    if (content.length < 1) {\n      contentRef.current.focus();\n      return;\n    }\n\n    if (window.confirm(isEdit ? \"일기를 수정하시겠습니까?\" : \"새로운 일기를 작성하시겠습니까?\")) {\n      if (!isEdit) {\n        onCreate(date, content, emotion);\n      } else {\n        onEdit(originData.id, date, content, emotion);\n      }\n    }\n\n    navigate(\"/\", {\n      replace: true\n    });\n  };\n\n  const handleRemove = () => {\n    if (window.confirm(\"정말 삭제하시겠습니까?\")) {\n      onRemove(originData.id);\n      navigate(\"/\", {\n        replace: true\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (isEdit) {\n      setDate(getStringDate(new Date(parseInt(originData.date))));\n      setEmotion(originData.emotion);\n      setContent(originData.content);\n    }\n  }, [isEdit, originData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DiaryEditor\",\n    children: [/*#__PURE__*/_jsxDEV(MyHeader, {\n      headText: isEdit ? \"일기 수정하기\" : \"새 일기쓰기\",\n      leftChild: /*#__PURE__*/_jsxDEV(MyButton, {\n        text: \"< 뒤로가기\",\n        onClick: () => navigate(-1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this),\n      rightChild: isEdit && /*#__PURE__*/_jsxDEV(MyButton, {\n        text: \"삭제하기\",\n        type: \"negative\",\n        onClick: handleRemove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uC624\\uB298\\uC740 \\uC5B8\\uC81C\\uC778\\uAC00\\uC694?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input_box\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input_date\",\n            value: date,\n            onChange: e => setDate(e.target.value),\n            type: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uC624\\uB298\\uC758 \\uAC10\\uC815\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input_box emotion_list_wrapper\",\n          children: emotionList.map(it => /*#__PURE__*/_jsxDEV(EmotionItem, { ...it,\n            onClick: handleClickEmote,\n            isSelected: it.emotion_id === emotion\n          }, it.emotion_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uC624\\uB298\\uC758 \\uC77C\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input_box text_wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"\\uC624\\uB298\\uC740 \\uC5B4\\uB560\\uB098\\uC694\",\n            ref: contentRef,\n            value: content,\n            onChange: e => setContent(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control_box\",\n          children: [/*#__PURE__*/_jsxDEV(MyButton, {\n            text: \"취소하기\",\n            onClick: () => navigate(-1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n            text: \"작성완료\",\n            type: \"positive\",\n            onClick: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DiaryEditor, \"nhYWBPyKDS9aU0ZjaSqQutRTs4g=\", false, function () {\n  return [useNavigate];\n});\n\n_c = DiaryEditor;\nexport default DiaryEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"DiaryEditor\");","map":{"version":3,"sources":["C:/Users/so960/Desktop/workspace/learn-react-emotion-diary/src/components/DiaryEditor.js"],"names":["useState","useRef","useContext","useEffect","useCallback","useNavigate","DiaryDispatchContext","MyHeader","MyButton","EmotionItem","getStringDate","emotionList","env","process","PUBLIC_URL","DiaryEditor","isEdit","originData","contentRef","content","setContent","emotion","setEmotion","date","setDate","Date","onCreate","onEdit","onRemove","handleClickEmote","navigate","handleSubmit","length","current","focus","window","confirm","id","replace","handleRemove","parseInt","e","target","value","map","it","emotion_id"],"mappings":"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","sourcesContent":["import { useState, useRef, useContext, useEffect, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { DiaryDispatchContext } from \"./../App.js\";\r\n\r\nimport MyHeader from \"./MyHeader\";\r\nimport MyButton from \"./MyButton\";\r\nimport EmotionItem from \"./EmotionItem\";\r\n\r\nimport { getStringDate } from \"../util/date.js\";\r\nimport { emotionList } from \"../util/emotion.js\";\r\n\r\nconst env = process.env;\r\nenv.PUBLIC_URL = env.PUBLIC_URL || \"\";\r\n\r\nconst DiaryEditor = ({ isEdit, originData }) => {\r\n  const contentRef = useRef();\r\n  const [content, setContent] = useState(\"\");\r\n  const [emotion, setEmotion] = useState(3);\r\n  const [date, setDate] = useState(getStringDate(new Date()));\r\n\r\n  const { onCreate, onEdit, onRemove } = useContext(DiaryDispatchContext);\r\n  const handleClickEmote = useCallback((emotion) => {\r\n    setEmotion(emotion);\r\n  }, []);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = () => {\r\n    if (content.length < 1) {\r\n      contentRef.current.focus();\r\n      return;\r\n    }\r\n\r\n    if (\r\n      window.confirm(\r\n        isEdit ? \"일기를 수정하시겠습니까?\" : \"새로운 일기를 작성하시겠습니까?\"\r\n      )\r\n    ) {\r\n      if (!isEdit) {\r\n        onCreate(date, content, emotion);\r\n      } else {\r\n        onEdit(originData.id, date, content, emotion);\r\n      }\r\n    }\r\n\r\n    navigate(\"/\", { replace: true });\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (window.confirm(\"정말 삭제하시겠습니까?\")) {\r\n      onRemove(originData.id);\r\n      navigate(\"/\", { replace: true });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEdit) {\r\n      setDate(getStringDate(new Date(parseInt(originData.date))));\r\n      setEmotion(originData.emotion);\r\n      setContent(originData.content);\r\n    }\r\n  }, [isEdit, originData]);\r\n\r\n  return (\r\n    <div className=\"DiaryEditor\">\r\n      <MyHeader\r\n        headText={isEdit ? \"일기 수정하기\" : \"새 일기쓰기\"}\r\n        leftChild={\r\n          <MyButton text={\"< 뒤로가기\"} onClick={() => navigate(-1)} />\r\n        }\r\n        rightChild={\r\n          isEdit && (\r\n            <MyButton\r\n              text={\"삭제하기\"}\r\n              type={\"negative\"}\r\n              onClick={handleRemove}\r\n            />\r\n          )\r\n        }\r\n      />\r\n      <div>\r\n        <section>\r\n          <h4>오늘은 언제인가요?</h4>\r\n          <div className=\"input_box\">\r\n            <input\r\n              className=\"input_date\"\r\n              value={date}\r\n              onChange={(e) => setDate(e.target.value)}\r\n              type=\"date\"\r\n            />\r\n          </div>\r\n        </section>\r\n        <section>\r\n          <h4>오늘의 감정</h4>\r\n          <div className=\"input_box emotion_list_wrapper\">\r\n            {emotionList.map((it) => (\r\n              <EmotionItem\r\n                key={it.emotion_id}\r\n                {...it}\r\n                onClick={handleClickEmote}\r\n                isSelected={it.emotion_id === emotion}\r\n              />\r\n            ))}\r\n          </div>\r\n        </section>\r\n        <section>\r\n          <h4>오늘의 일기</h4>\r\n          <div className=\"input_box text_wrapper\">\r\n            <textarea\r\n              placeholder=\"오늘은 어땠나요\"\r\n              ref={contentRef}\r\n              value={content}\r\n              onChange={(e) => setContent(e.target.value)}\r\n            />\r\n          </div>\r\n        </section>\r\n        <section>\r\n          <div className=\"control_box\">\r\n            <MyButton text={\"취소하기\"} onClick={() => navigate(-1)} />\r\n            <MyButton\r\n              text={\"작성완료\"}\r\n              type={\"positive\"}\r\n              onClick={handleSubmit}\r\n            />\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiaryEditor;\r\n"]},"metadata":{},"sourceType":"module"}